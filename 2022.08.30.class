// You are given a binary tree:

// public class Node {
//   public Node left;
//   public Node right;
//   public int value;
  
//   public Node(Node l, Node r, int v) {
//     left = l;
//     right = r;
//     value = v;
//   }
// }
// Your task is to return the list with elements from tree sorted by levels, which means the root element goes first, then root children (from left to right) are second and third, and so on.

// Return empty list if root is 'null'.

// Example 1 - following tree:

//                  2
//             8        9
//           1  3     4   5
// Should return following list:

// [2,8,9,1,3,4,5]
// Example 2 - following tree:

//                  1
//             8        4
//               3        5
//                          7
// Should return following list:

// [1,8,4,3,5,7]

// 못풀었다...
import java.util.*;

class Kata {
    public static List<Integer> treeByLevels(Node node) {
        List<Integer> res = new ArrayList<>();
        Queue<Node> q = new ArrayDeque<>(); // Queue를 처음 봄 ArrayDeque도 처음봄..

        if(node != null) q.add(node); // 맨처음 큐에 노드를 넣는다

        while(!q.isEmpty()){
            node = q.poll(); // 맨 위의 노드를 꺼낸다
            res.add(node.value);  // 꺼낸 맨 위의 노드값을 리스트에 추가
            if(node.left!=null) q.add(node.left); // 왼쪽부터 큐에 넣는다
            if(node.right!=null) q.add(node.right); 
        }

        return res;
    }
}