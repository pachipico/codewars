// #Sorting on planet Twisted-3-7

// There is a planet... in a galaxy far far away. It is exactly like our planet, but it has one difference: #The values of the digits 3 and 7 are twisted. Our 3 means 7 on the planet Twisted-3-7. And 7 means 3.

// Your task is to create a method, that can sort an array the way it would be sorted on Twisted-3-7.

// 7 Examples from a friend from Twisted-3-7:

// [1,2,3,4,5,6,7,8,9] -> [1,2,7,4,5,6,3,8,9]
// [12,13,14] -> [12,14,13]
// [9,2,4,7,3] -> [2,7,4,3,9]
// There is no need for a precheck. The array will always be not null and will always contain at least one number.

// You should not modify the input array!

// Have fun coding it and please don't forget to vote and rank this kata! :-)

// I have also created other katas. Take a look if you enjoyed this kata!

// 내 답안
import java.util.Arrays;
import java.util.stream.Collectors;


public class Kata
{
  public static Integer[] sortTwisted37(Integer[] array)
  {
    return Arrays.stream(array).map(v -> {
      String res = String.valueOf(v).replaceAll("3", "t");
      res = res.replaceAll("7", "s");
      res = res.replaceAll("s", "3");
      res = res.replaceAll("t", "7");
      return Integer.parseInt(res);
    }).sorted().map(v -> {
      String res = String.valueOf(v).replaceAll("3", "t");
      res = res.replaceAll("7", "s");
      res = res.replaceAll("s", "3");
      res = res.replaceAll("t", "7");
      return Integer.parseInt(res);
    }).toArray(Integer[]::new);
  }
}

// 모범 답안
import java.util.Arrays;

public class Kata
{
  private static Integer swap37(Integer i) {
    return Integer.valueOf(i.toString()
        .replace("7", "_")
        .replace("3", "7")
        .replace("_", "3")
    );
  }
    
  public static Integer[] sortTwisted37(Integer[] array)
  {
      return Arrays.stream(array)
          .map(Kata::swap37)
          .sorted(Integer::compare)
          .map(Kata::swap37)
          .toArray(Integer[]::new);
  }
}