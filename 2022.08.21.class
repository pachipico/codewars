// Task
// Given an array/list [] of n integers , find maximum triplet sum in the array Without duplications .

// Notes :
// Array/list size is at least 3 .

// Array/list numbers could be a mixture of positives , negatives and zeros .

// Repetition of numbers in the array/list could occur , So (duplications are not included when summing).

// Input >> Output Examples
// 1- maxTriSum ({3,2,6,8,2,3}) ==> return (17)
// Explanation:
// As the triplet that maximize the sum {6,8,3} in order , their sum is (17)

// Note : duplications are not included when summing , (i.e) the numbers added only once .

// 내 답안 -> set로 중복 제거하고, 내림차순으로 만들어 3개만 더하게.
import java.util.*;
import java.util.stream.Collectors;

public class Solution
{
    public static int maxTriSum(int[] numbers) {
        return Arrays.stream(numbers).boxed().collect(Collectors.toSet()).stream().sorted(Comparator.reverseOrder()).limit(3).reduce(Integer::sum).get();
    }
}
// distinct를 이용하면 더 좋은듯
import java.util.*;
import java.util.stream.Collectors;

public class Solution
{
    public static int maxTriSum (int[] numbers)
    {
        return Arrays.stream(numbers).boxed().distinct().sorted(Comparator.reverseOrder()).limit(3).reduce(Integer::sum).get();
    }
}

// 모범답안
import java.util.Collections;
import java.util.Arrays;

public class Solution
{
    public static int maxTriSum (int[] numbers)
    {       return Arrays.stream(numbers)
               .boxed()
               .sorted(Collections.reverseOrder())
               .distinct()
               .limit(3)
               .mapToInt(i -> i)
               .sum();
    }
}
// distinct를 알게 되었다.