// Task
// Given an array of N integers, you have to find how many times you have to add up the smallest numbers in the array until their Sum becomes greater or equal to K.

// Notes:
// List size is at least 3.

// All numbers will be positive.

// Numbers could occur more than once , (Duplications may exist).

// Threshold K will always be reachable.

// Input >> Output Examples
// minimumSteps({1, 10, 12, 9, 2, 3}, 6)  ==>  return (2)
// Explanation:
// We add two smallest elements (1 + 2), their sum is 3 .

// Then we add the next smallest number to it (3 + 3) , so the sum becomes 6 .

// Now the result is greater or equal to 6 , Hence the output is (2) i.e (2) operations are required to do this .



// 내 답안
import java.util.Arrays;
import java.util.Comparator;
public class Kata {
    public static int minimumSteps(int[] numbers, int k) {
        // Your Code is Here ... Enjoy !!!
        int[] arr = Arrays.stream(numbers).sorted().toArray();
        int cnt = -1;
        int sum = 0;
        for (int i : arr) {
            if(sum < k){
                sum += i;
                cnt ++;
            }
        }
        return cnt;
    }
}


// 모범 답안
import java.util.Arrays;

public class Kata {
    public static int minimumSteps(int[] numbers, int k) {
        Arrays.sort(numbers);
        int sum = 0;
        int i = 0;
        while(sum < k) {
          sum+=numbers[i];
          i++;
        }
        return i-1;
    }
}