// You have to sort the inner content of every word of a string in descending order.

// The inner content is the content of a word without first and the last char.

// Some examples:

// "sort the inner content in descending order"  -->  "srot the inner ctonnet in dsnnieedcg oredr"
// "wait for me"        -->  "wiat for me"
// "this kata is easy"  -->  "tihs ktaa is esay"
// Words are made up of lowercase letters.

// The string will never be null and will never be empty. In C/C++ the string is always nul-terminated.

// Have fun coding it and please don't forget to vote and rank this kata! :-)

// I have also created other katas. Take a look if you enjoyed this kata!

// 내 답안
import java.util.Arrays;
import java.util.stream.Collectors;

public class Kata
{
  public static String sortTheInnerContent(String words)
  {  
        return Arrays.stream(words.split(" ")).map(v -> {
            if(v.length() == 1) return v;
            String res = String.valueOf(v.charAt(0));
            String[] sort = v.substring(1, v.length()-1).split("");
            Arrays.sort(sort);
            return res + new StringBuilder(String.join("", sort)).reverse().toString() + String.valueOf(v.charAt(v.length()-1));
        }).collect(Collectors.joining(" "));
  }
}

// 모범답안
import java.util.Arrays;
import java.util.Collections;
import java.util.stream.Collectors;

public class Kata {

  public static String sortTheInnerContent(String words) {
    return Arrays.asList(words.split(" ")).stream()
      .map(word -> word.length() < 3 ? word : word.charAt(0) + sortChars(word) + word.charAt(word.length() - 1))
      .collect(Collectors.joining(" "));
  }
  
  public static String sortChars(String word) {
    String[] chars = word.substring(1, word.length() - 1).split("");
    Arrays.sort(chars, Collections.reverseOrder());
    return String.join("", chars);
  }

}