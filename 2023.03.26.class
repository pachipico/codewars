//Inspired by the Fold an Array kata. This one is sort of similar but a little different.
//
//        Task
//        You will receive an array as parameter that contains 1 or more integers and a number n.
//
//        Here is a little visualization of the process:
//
//        Step 1: Split the array in two:
//
//        [1, 2, 5, 7, 2, 3, 5, 7, 8]
//        /            \
//        [1, 2, 5, 7]    [2, 3, 5, 7, 8]
//        Step 2: Put the arrays on top of each other:
//
//        [1, 2, 5, 7]
//        [2, 3, 5, 7, 8]
//        Step 3: Add them together:
//
//        [2, 4, 7, 12, 15]
//        Repeat the above steps n times or until there is only one number left, and then return the array.
//
//        Example
//        Input: arr=[4, 2, 5, 3, 2, 5, 7], n=2
//
//
//        Round 1
//        -------
//        step 1: [4, 2, 5]  [3, 2, 5, 7]
//
//        step 2:    [4, 2, 5]
//        [3, 2, 5, 7]
//
//        step 3: [3, 6, 7, 12]
//
//
//        Round 2
//        -------
//        step 1: [3, 6]  [7, 12]
//
//        step 2:  [3,  6]
//        [7, 12]
//
//        step 3: [10, 18]
//
//
//        Result: [10, 18]

//  내 답안
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.*;

public class Kata {

    public static int[] splitAndAdd(int[] numbers, int n) {
        // your code
        List<Integer> ls = Arrays.stream(numbers).boxed().collect(Collectors.toList());
        for(int i = 0; i < n ; i++){
            ls = reduce(ls);
        }
        return  ls.stream().mapToInt(Integer::intValue).toArray();
    }

    private static List<Integer> reduce(List<Integer> ls ){
        int size = ls.size();
        List<Integer> l1 = ls.subList(0, size / 2);
        List<Integer> l2 = ls.subList(size / 2, size);
        Collections.reverse(l1);
        Collections.reverse(l2);
        List<Integer> res;
        if(l1.size() != l2.size()){
            res = IntStream.range(0, l2.size()).map(idx -> (idx == l1.size() ? 0 : l1.get(idx)) + l2.get(idx)).boxed().collect(Collectors.toList());
        } else {
            res = IntStream.range(0, l2.size()).map(idx -> l1.get(idx) + l2.get(idx)).boxed().collect(Collectors.toList());
        }
        Collections.reverse(res);
        return res;
    }

}

// 모범 답안
import java.util.Arrays;

public class Kata {

    public static int[] splitAndAdd(int[] numbers, int n) {
        int[] arr = Arrays.copyOf(numbers, numbers.length);
        while (arr.length > 1 && n-- > 0) {
            int[] tmp = Arrays.copyOfRange(arr, arr.length/2, arr.length);
            for (int i = 0 ; i < arr.length/2 ; i++) tmp[i + arr.length%2] += arr[i];
            arr = tmp;
        }
        return arr;
    }
}