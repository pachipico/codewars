//Consider the word "abode". We can see that the letter a is in position 1 and b is in position 2. In the alphabet, a and b are also in positions 1 and 2. Notice also that d and e in abode occupy the positions they would occupy in the alphabet, which are positions 4 and 5.
//
//        Given an array of words, return an array of the number of letters that occupy their positions in the alphabet for each word. For example,
//
//        solve(["abode","ABc","xyzD"]) = [4, 3, 1]
//        See test cases for more examples.
//
//        Input will consist of alphabet characters, both uppercase and lowercase. No spaces.
//

// 내 답안
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution{
    public static int[] solve(String[] arr){
        String[] strArr = new String[]{"a","b","c","d","e","f","g","h", "i", "j","k","l","m","n","o","p","q","r","s","t","u","v","w","x", "y", "z"};
        return Arrays.stream(arr).mapToInt(v -> {
            System.out.println(v);
            String[] temp = v.substring(0, v.length() > 26 ? 26 : v.length()).toLowerCase().split("");
            return (int) IntStream.range(0, temp.length).filter(idx -> temp[idx].equals(strArr[idx])).count();
        }).toArray();
    }
}

// 모범 답안
import java.util.stream.IntStream;
        import java.util.stream.Stream;

public class Solution{
    public static String alphabet = "abcdefghijklmnopqrstuvwxyz";

    public static int countLetters(String str) {
        return IntStream.range(0, str.length()).filter(i -> alphabet.indexOf(str.charAt(i)) == i).toArray().length;
    }

    public static int[] solve(String[] arr){
        return Stream.of(arr).map(String::toLowerCase).mapToInt(Solution::countLetters).toArray();
    }
}