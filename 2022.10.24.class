// A traveling salesman has to visit clients. He got each client's address e.g. "432 Main Long Road St. Louisville OH 43071" as a list.

// The basic zipcode format usually consists of two capital letters followed by a white space and five digits. The list of clients to visit was given as a string of all addresses, each separated from the others by a comma, e.g. :

// "123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432".

// To ease his travel he wants to group the list by zipcode.

// Task
// The function travel will take two parameters r (addresses' list of all clients' as a string) and zipcode and returns a string in the following format:

// zipcode:street and town,street and town,.../house number,house number,...

// The street numbers must be in the same order as the streets where they belong.

// If a given zipcode doesn't exist in the list of clients' addresses return "zipcode:/"

// Examples
// r = "123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432"

// travel(r, "OH 43071") --> "OH 43071:Main Street St. Louisville,Main Long Road St. Louisville/123,432"

// travel(r, "NY 56432") --> "NY 56432:High Street Pollocksville/786"

// travel(r, "NY 5643") --> "NY 5643:/"

// 내 답안
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.*;
import java.util.stream.Collectors;

public class Travel {
    public static String travel(String r, String zipcode) {
        Pattern pattern = Pattern.compile(zipcode+"$");
        String[] adresses = r.split(",");
        List<String> codes = new ArrayList<>();
        String res = Arrays.stream(adresses).filter(v-> pattern.matcher(v).find()).map(str -> {

          str = str.replaceAll("[A-Z][A-Z] \\d*", "");
          Pattern pt = Pattern.compile("\\d{1,}");
          Matcher mc = pt.matcher(str);
          while(mc.find()){
            for(int i = 0; i <= mc.groupCount(); i++){
              codes.add(mc.group(i));
            }
          }
          return str.replaceAll("\\d{1,}", "").trim();
        }).collect(Collectors.joining(","));
        String codeStr = String.join(",", codes);
        return zipcode + ":" + (zipcode.length() < 1 ? "/" : res + "/" + codeStr);
    }
}

// 모범 답안
import java.util.regex.*;

public class Travel {
    public static String travel(String r, String zipcode) {
        if (zipcode.isEmpty()) {
            return zipcode + ":/";
        }

        String[] addresses = r.split(",");
        String streets = "", houseNumbers = "/";

        Pattern regex = Pattern.compile("(\\d+)\\s((\\w+\\.?\\s)+)" + zipcode);
        Matcher matcher;

        for (String address : addresses) {
            if (address.endsWith(zipcode)) {
                matcher = regex.matcher(address);
                while (matcher.find()) {
                    houseNumbers += matcher.group(1).trim() + ",";
                    streets += matcher.group(2).trim() + ",";
                }
            }
        }

        if (streets.isEmpty()) {
            return zipcode + ":/";
        } else {
            return zipcode + ":" + streets.substring(0, streets.length() - 1) + houseNumbers.substring(0, houseNumbers.length() - 1);
        }
    }
}

// 정규식 더 공부하자...
