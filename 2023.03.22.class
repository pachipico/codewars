// In this kata, you have an input string and you should check whether it is a valid message. To decide that, you need to split the string by the numbers, and then compare the numbers with the number of characters in the following substring.

// For example "3hey5hello2hi" should be split into 3, hey, 5, hello, 2, hi and the function should return true, because "hey" is 3 characters, "hello" is 5, and "hi" is 2; as the numbers and the character counts match, the result is true.

// Notes:

// Messages are composed of only letters and digits
// Numbers may have multiple digits: e.g. "4code13hellocodewars" is a valid message
// Every number must match the number of character in the following substring, otherwise the message is invalid: e.g. "hello5" and "2hi2" are invalid
// If the message is an empty string, you should return true

// 내 답안
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class Kata {
  
  public static boolean isAValidMessage(String message) {
    if(message == "0" || message.isBlank()) return true;

    Matcher matcher = Pattern.compile("(\\d+\\D+)").matcher(message);
    boolean res = true;
    int length = 0;
    while(matcher.find()){
      String group = matcher.group();
      length += group.length();
      String[] arr = group.replaceAll("(\\d+)", "$1 ").split(" ");
      String st = arr[1];
      int n = Integer.parseInt(arr[0]);

      if(st.length() != n) res = false;
      
    }
    return length == message.length() ? res : false;
    
  }
}

// 모범 답안
import java.util.regex.Pattern;
import java.util.regex.Matcher;
public class Kata {
  
  private static Pattern MSG_PART = Pattern.compile("(\\d+)(\\D*)");
  public static boolean isAValidMessage(String message) {
    return MSG_PART.matcher(message)
                   .replaceAll(g -> Integer.parseInt(g.group(1)) == g.group(2).length() ? "" : "1")
                   .isEmpty();
  }
}
// 무친.. matcher에 저런 기능이 있는거 몰랐다..