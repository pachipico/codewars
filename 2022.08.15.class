// The input is a string str of digits. Cut the string into chunks (a chunk here is a substring of the initial string) of size sz (ignore the last chunk if its size is less than sz).

// If a chunk represents an integer such as the sum of the cubes of its digits is divisible by 2, reverse that chunk; otherwise rotate it to the left by one position. Put together these modified chunks and return the result as a string.

// If

// sz is <= 0 or if str is empty return ""
// sz is greater (>) than the length of str it is impossible to take a chunk of size sz hence return "".
// Examples:
// revrot("123456987654", 6) --> "234561876549"
// revrot("123456987653", 6) --> "234561356789"
// revrot("66443875", 4) --> "44668753"
// revrot("66443875", 8) --> "64438756"
// revrot("664438769", 8) --> "67834466"
// revrot("123456779", 8) --> "23456771"
// revrot("", 8) --> ""
// revrot("123456779", 0) --> "" 
// revrot("563000655734469485", 4) --> "0365065073456944"
// Example of a string rotated to the left by one position:
// s = "123456" gives "234561".

// 내 답안
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;

class RevRot {
    
    public static String revRot(String strng, int sz) {
        // your code
        if (sz == 0 || sz > strng.length()) return "";
        List<String > list = new ArrayList<>();
        for (int i = 0; i < strng.length(); i += sz) {
            if (i + sz <= strng.length()) {
                list.add(strng.substring(i, i + sz));
            }
        }
        return list.stream().map(v -> {
            if(Arrays.stream(v.split("")).mapToInt(Integer::valueOf).reduce(Integer::sum).getAsInt()%2 == 1){
                v += v.charAt(0);
                return v.substring(1);
            } else {
                return new StringBuilder(v).reverse().toString();
            }
        }).collect(Collectors.joining());
    }
}


// 모범 답안
class RevRot {
    public static String revRot(String nums, int sz) {
        StringBuffer groups = new StringBuffer();
        for (int i = 0, len = nums.length(); i + sz <= len && sz > 0; i += sz) {
            String group = nums.substring(i, i + sz);
            groups.append(isDivisible(group) ? new StringBuffer(group).reverse() : group.substring(1) + group.charAt(0));
        }
        return groups.toString();  
    }
    public static boolean isDivisible(String group) {
        int sum = 0;
        for (char num : group.toCharArray()) {
            sum += Character.getNumericValue(num);
        }
        return sum % 2 == 0;
    }
}