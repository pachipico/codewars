//Strong number is the number that the sum of the factorial of its digits is equal to number itself.
//
//        For example, 145 is strong, since 1! + 4! + 5! = 1 + 24 + 120 = 145.
//
//        Task
//        Given a number, Find if it is Strong or not and return either "STRONG!!!!" or "Not Strong !!".
//
//        Notes
//        Number passed is always Positive.
//        Return the result as String
//        Input >> Output Examples
//        strong_num(1) ==> return "STRONG!!!!"
//        Since, the sum of its digits' factorial (1) is equal to number itself, then its a Strong.
//
//        strong_num(123) ==> return "Not Strong !!"
//        Since the sum of its digits' factorial of 1! + 2! + 3! = 9 is not equal to number itself, then it's Not Strong .
//
//        strong_num(2)  ==>  return "STRONG!!!!"
//        Since the sum of its digits' factorial of 2! = 2 is equal to number itself, then its a Strong.
//
//        strong_num(150) ==> return "Not Strong !!"
//        Since the sum of its digits' factorial of 1! + 5! + 0! = 122 is not equal to number itself, Then it's Not Strong .

// 내 답안
import java.util.Arrays;

class StrongNumber {

    public static String isStrongNumber(int num) {
        System.out.println(num);
        System.out.println(factorial(4));
        int[] intArr = Arrays.stream(String.valueOf(num).split("")).mapToInt(Integer::valueOf).toArray();
        return Arrays.stream(intArr).map(v -> factorial(v)).sum() == num ? "STRONG!!!!" : "Not Strong !!";
    }

    private static int factorial(int num){
        int temp = num;
        int res =  1;
        for(int i = 1; i <= num; i++){
            res *= i;
        }
        return res;
    }
}

// 모범 답안
import static java.util.stream.IntStream.rangeClosed;

class StrongNumber {
    static String isStrongNumber(int num) {
        return (num + "").chars().map(Character::getNumericValue)
                .map(i -> rangeClosed(1, i).reduce(1, (a, b) -> a * b))
                .sum() == num ? "STRONG!!!!" : "Not Strong !!";
    }
}