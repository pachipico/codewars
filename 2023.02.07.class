// Introduction
// There is a war and nobody knows - the alphabet war!
// The letters called airstrikes to help them in war - dashes and dots are spread everywhere on the battlefield.

// Task
// Write a function that accepts reinforces array of strings and airstrikes array of strings.
// The reinforces strings consist of only small letters. The size of each string in reinforces array is the same.
// The airstrikes strings consists of * and white spaces. The size of each airstrike may vary. There may be also no airstrikes at all.

// The first row in reinforces array is the current battlefield. Whenever some letter is killed by bomb, it's replaced by a letter from next string in reinforces array on the same position.
// The airstrike always starts from the beginning of the battlefield.
// The * means a bomb drop place. The each * bomb kills letter only on the battelfield. The bomb kills letter on the same index on battlefield plus the adjacent letters.
// The letters on the battlefield are replaced after airstrike is finished.
// Return string of letters left on the battlefield after the last airstrike. In case there is no any letter left in reinforces on specific position, return _.

// reinforces = [ "abcdefg",
//                "hijklmn"];
// airstrikes = [ "   *   ",
//                "*  *   "];

// The battlefield  is     : "abcedfg".
// The first airstrike    : "   *   "
// After first airstrike  : "ab___fg"
// Reinforces are comming : "abjklfg"
// The second airstrike   : "*  *   "
// After second airstrike : "_____fg"
// Reinforces are coming  : "hi___fg"
// No more airstrikes => return "hi___fg"
// Other example
//   reinforces =
//           ["g964xxxxxxxx",
//            "myjinxin2015",
//            "steffenvogel",
//            "smile67xxxxx",
//            "giacomosorbi",
//            "freywarxxxxx",
//            "bkaesxxxxxxx",
//            "vadimbxxxxxx",
//            "zozofouchtra",
//            "colbydauphxx" ];
// airstrikes =
//           ["* *** ** ***",
//            " ** * * * **",
//            " * *** * ***",
//            " **  * * ** ",
//            "* ** *   ***",
//            "***   ",
//            "**",
//            "*",
//            "*" ]
// That should lead to:

// AlphabetWars.reinforcesMassacre(reinforces, airstrikes); // => codewarsxxxx

// 내 답안
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class AlphabetWars {

  public static String reinforcesMassacre(
    String[] reinforces,
    String[] airstrikes
  ) {
    // Your code here!
    String res = reinforce(bomb(reinforces[0], airstrikes[0]), reinforces[0]);
    for (int i = 1; i < airstrikes.length; i++) {
      System.out.println("        " + i);
      System.out.println("1. " + res);

      res = bomb(res, airstrikes[i]);
      System.out.println("2. " + airstrikes[i]);

      System.out.println("3. " + res);
      if (i == reinforces.length - 1) {
        res = reinforce(res, reinforces[i]);
      } else {
        res = reinforce(res, reinforces[i + 1]);
      }
      System.out.println("5. " + res);
    }
    return res;
  }

  private static String bomb(String target, String strike) {
    String[] bArr = strike.split("");
    String[] tArr = target.split("");
    for (int i = 0; i < strike.length(); i++) {
      if (bArr[i].equals("*")) tArr[i] = "_";
    }
    String res = Arrays
      .stream(tArr)
      .collect(Collectors.joining())
      .replaceAll("(?<=_)\\w", "_");
    res = res.replaceAll("\\w(?=_)", "_");
    return res;
  }

  private static String reinforce(String target, String reinforce) {
    String[] tArr = target.split("");
    String[] rArr = reinforce.split("");

    System.out.println("4. " + reinforce);
    return IntStream
      .range(0, tArr.length)
      .mapToObj(idx -> {
        //            System.out.println(tArr[idx] + " = " + (tArr[idx].equals("_") ? "_" : tArr[idx]));
        return tArr[idx].equals("_") ? rArr[idx] : tArr[idx];
      })
      .collect(Collectors.joining());
  }
}
// 못풀겠다 다 풀었는데
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class solution {
    public static String reinforcesMassacre(String[] reinforces, String[] airstrikes) {
        // Your code here!
        String res = reinforce(bomb(reinforces[0], airstrikes[0]), reinforces[0]);
        for(int i = 0;i<reinforces.length;i++){
            res = bomb(res, airstrikes[i+1]);
            res = reinforce(res, reinforces[i]);
            System.out.println(res);
        }
        return res;
    }

    private static String bomb(String target, String strike){
        String[] bArr = strike.split("");
        String[] tArr = target.split("");
        for(int i = 0; i<strike.length();i++){
            if(bArr[i].equals("*")) tArr[i] = "_";
        }
        String res = Arrays.stream(tArr).collect(Collectors.joining()).replaceAll("(?<=_)\\w", "_");
        res = res.replaceAll("\\w(?=_)", "_");
        return res;
    }
    private static String reinforce(String target, String reinforce){
        String[] tArr = target.split("");
        String[] rArr = reinforce.split("");

        System.out.println("4. " + reinforce);
        return IntStream.range(0, tArr.length).mapToObj(idx -> {
//            System.out.println(tArr[idx] + " = " + (tArr[idx].equals("_") ? "_" : tArr[idx]));
            return tArr[idx].equals("_") ? rArr[idx] : tArr[idx];
        }).collect(Collectors.joining());
    }
}

// 모범답안
import java.util.Arrays;
import java.util.Set;
import java.util.HashSet;
import java.util.stream.IntStream;
import java.util.stream.Collectors;

public class AlphabetWars {
    
    public static String reinforcesMassacre(String[] reinforces, String[] airstrikes) {
        
        int[] rIdx = new int[reinforces[0].length() + 2];
        for (String a: airstrikes) {
            Set<Integer> massacre = new HashSet<Integer>();
            int i = 0;
            for (char c: a.toCharArray()) { i++;
                if (c == '*') massacre.addAll(Arrays.asList(i-1, i, i+1));
            }
            for (int idx: massacre) rIdx[idx] += 1;
        }
        return IntStream.range(1, rIdx.length-1)
                        .mapToObj( c -> rIdx[c] >= reinforces.length ? "_" : reinforces[rIdx[c]].substring(c-1,c) )
                        .collect(Collectors.joining());
    }
}

