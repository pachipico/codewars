// Every book has n pages with page numbers 1 to n. The summary is made by adding up the number of digits of all page numbers.

// Task: Given the summary, find the number of pages n the book has.

// Example
// If the input is summary=25, then the output must be n=17: The numbers 1 to 17 have 25 digits in total: 1234567891011121314151617.

// Be aware that you'll get enormous books having up to 100.000 pages.

// All inputs will be valid.

// Here's the opposite kata, which is more complex (Paginating a huge book)

// 모범 답안
import java.util.stream.IntStream;
import java.util.stream.Collectors;

public class HowManyPagesInABook {
  
  public static int amountOfPages(int summary) {
        String res = IntStream.rangeClosed(1, summary)
                                        .mapToObj(v -> String.valueOf(v) + " ".repeat(String.valueOf(v).length()))
                                        .collect(Collectors.joining())
                                        .substring(0, summary*2);
        String[] arr = res.split("\\s+");
        return Integer.parseInt(arr[arr.length-1]);
  }

}

// 모범답안
import java.util.concurrent.atomic.AtomicInteger;

import static java.util.stream.IntStream.iterate;

public class HowManyPagesInABook {

    public static int amountOfPages(int summary) {
        final var sum = new AtomicInteger(0);
        return (int) iterate(1, i -> sum.get() < summary, i -> i + 1)
                .peek(i -> sum.addAndGet((int) Math.log10(i) + 1))
                .count();
    }
}