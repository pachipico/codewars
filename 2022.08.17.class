// Notes
// Array/list size is at least 3 .

// Array/list's numbers Will be mixture of positives , negatives and zeros

// Repetition of numbers in the array/list could occur.

// Input >> Output Examples
// maxProduct ({4, 3, 5}, 2) ==>  return (20)
// Explanation:
// Since the size (k) equal 2 , then the subsequence of size 2 whose gives product of maxima is 5 * 4 = 20 .
// maxProduct ({8, 10 , 9, 7}, 3) ==>  return (720)
// Explanation:
// Since the size (k) equal 3 , then the subsequence of size 3 whose gives product of maxima is  8 * 9 * 10 = 720 .
// maxProduct ({10, 8, 3, 2, 1, 4, 10}, 5) ==> return (9600)
// Explanation:
// Since the size (k) equal 5 , then the subsequence of size 5 whose gives product of maxima is  10 * 10 * 8 * 4 * 3 = 9600 .
// maxProduct ({-4, -27, -15, -6, -1}, 2) ==> return (4)
// Explanation:
// Since the size (k) equal 2 , then the subsequence of size 2 whose gives product of maxima is  -4 * -1 = 4 .
// maxProduct ({10, 3, -1, -27} , 3)  return (-30)
// Explanation:
// Since the size (k) equal 3 , then the subsequence of size 3 whose gives product of maxima is 10 * 3 * -1 = -30 .
// 내 답안
import java.util.Arrays;
import java.util.stream.IntStream;
import java.util.Comparator;
public class Solution
{
    public static long maxProduct(int[] numbers, int sub_size)
    {
        int[] ints = Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).mapToInt(v -> v).toArray();
        return sub_size != 0 ? IntStream.range(0, sub_size).mapToLong(idx -> ints[idx]).reduce((a, b) -> a * b).getAsLong() : 1;

    }

// 모범답안
import static java.util.Arrays.stream;

public class Solution {
    public static long maxProduct(int[] numbers, int subSize) {
        return stream(numbers)
            .sorted()
            .skip(numbers.length-subSize)
            .mapToLong(Long::valueOf)
            .reduce(1, (x,y)->x*y);
    }
}

// skip 처음봤음...