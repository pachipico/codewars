// Write a function that accepts two square matrices (N x N two dimensional arrays), and return the sum of the two. Both matrices being passed into the function will be of size N x N (square), containing only integers.

// How to sum two matrices:

// Take each cell [n][m] from the first matrix, and add it with the same [n][m] cell from the second matrix. This will be cell [n][m] of the solution matrix.

// Visualization:

// |1 2 3|     |2 2 1|     |1+2 2+2 3+1|     |3 4 4|
// |3 2 1|  +  |3 2 3|  =  |3+3 2+2 1+3|  =  |6 4 4|
// |1 1 1|     |1 1 3|     |1+1 1+1 1+3|     |2 2 4|
// Example
// matrixAddition(
//   [ [1, 2, 3],
//     [3, 2, 1],
//     [1, 1, 1] ],
// //      +
//   [ [2, 2, 1],
//     [3, 2, 3],
//     [1, 1, 3] ] )

// // returns:
//   [ [3, 4, 4],
//     [6, 4, 4],
//     [2, 2, 4] ]
// 내 답안
public class Kata {
	public static int[][] matrixAddition(int[][] a, int[][] b) {
    int x = a[0].length;
		int y = a.length;
		int[][] res = new int[y][x];
		for (int i = 0; i < y; i++) {
			for (int j = 0; j < x; j++) {
				res[i][j] = a[i][j] + b[i][j]; 
			}
		}
		return res;
	}
}

// 모범답안
// IntSteam을 써보려 했는데 방법을 몰랐다
import java.util.stream.IntStream;
public class Kata {
  public static int[][] matrixAddition(int[][] a, int[][] b) {
    IntStream.range(0, a.length * a.length)
                 .forEach(n -> a[n / a.length][n % a.length] += b[n / a.length][n % a.length]);
        return a;
  }
}