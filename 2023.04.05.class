// Find the longest substring in alphabetical order.

// Example: the longest alphabetical substring in "asdfaaaabbbbcttavvfffffdf" is "aaaabbbbctt".

// There are tests with strings up to 10 000 characters long so your code will need to be efficient.

// The input will only consist of lowercase characters and will be at least one letter long.

// If there are multiple solutions, return the one that appears first.

// Good luck :)

// 내 답안
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.Arrays;
import java.util.stream.Collectors;

class StringHandling {
  public static String longestAlpabeticalSubstring(String text) {
        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        List<String> res = new ArrayList<>();
        String pt = Arrays.stream(alphabet.split("")).map(v -> String.format("(%s?)+", v)).collect(Collectors.joining());
        Matcher matcher = Pattern.compile(pt).matcher(text);
        while (matcher.find()) {
            String match = matcher.group();
            res.add(match);
        }
        res.sort((a, b) -> b.length() - a.length());
        return res.get(0);
  }
}

// 모범 답안
import java.util.regex.Pattern;

class StringHandling {
  public static String longestAlpabeticalSubstring(String text) {
      return Pattern
        .compile("a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*")
        .matcher(text)
        .results()
        .reduce((a, b) -> a.group().length() >= b.group().length() ? a : b)
        .get()
        .group();
  }
}

// results()를 처음 봤다... 좋은데?
